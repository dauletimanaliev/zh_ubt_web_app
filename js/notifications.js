// –ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationManager {
    constructor() {
        this.container = null;
        this.notifications = [];
        this.maxNotifications = 5;
        this.defaultDuration = 5000;
        
        this.init();
    }
    
    init() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        this.container = document.getElementById('notifications-container');
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.id = 'notifications-container';
            this.container.className = 'notifications-container';
            document.body.appendChild(this.container);
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    show(message, type = 'info', duration = null) {
        const notification = this.createNotification(message, type, duration);
        this.addNotification(notification);
        return notification.id;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success(message, duration = null) {
        return this.show(message, 'success', duration);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error(message, duration = null) {
        return this.show(message, 'error', duration);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    warning(message, duration = null) {
        return this.show(message, 'warning', duration);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    info(message, duration = null) {
        return this.show(message, 'info', duration);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    createNotification(message, type, duration) {
        const id = 'notification_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        const notification = {
            id,
            message,
            type,
            duration: duration || this.defaultDuration,
            element: null,
            timeout: null
        };
        
        // –°–æ–∑–¥–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç
        const element = document.createElement('div');
        element.className = `notification notification-${type}`;
        element.setAttribute('data-id', id);
        
        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        
        element.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">${icons[type] || icons.info}</div>
                <div class="notification-message">${message}</div>
                <button class="notification-close" onclick="window.notifications.hide('${id}')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        `;
        
        notification.element = element;
        
        return notification;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    addNotification(notification) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        while (this.notifications.length >= this.maxNotifications) {
            const oldest = this.notifications.shift();
            this.removeNotificationElement(oldest);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.notifications.push(notification);
        this.container.appendChild(notification.element);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            notification.element.classList.add('notification-show');
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        this.startProgressBar(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (notification.duration > 0) {
            notification.timeout = setTimeout(() => {
                this.hide(notification.id);
            }, notification.duration);
        }
        
        // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è Telegram
        if (window.telegramApp?.isRunningInTelegram()) {
            const hapticType = notification.type === 'error' ? 'notification' : 'impact';
            window.telegramApp.hapticFeedback(hapticType, 'light');
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    startProgressBar(notification) {
        if (notification.duration <= 0) return;
        
        const progressBar = notification.element.querySelector('.notification-progress-bar');
        if (progressBar) {
            progressBar.style.animationDuration = `${notification.duration}ms`;
            progressBar.classList.add('notification-progress-active');
        }
    }
    
    // –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    hide(id) {
        const notification = this.notifications.find(n => n.id === id);
        if (!notification) return;
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (notification.timeout) {
            clearTimeout(notification.timeout);
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        notification.element.classList.add('notification-hide');
        
        setTimeout(() => {
            this.removeNotificationElement(notification);
            this.notifications = this.notifications.filter(n => n.id !== id);
        }, 300);
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    removeNotificationElement(notification) {
        if (notification.element && notification.element.parentNode) {
            notification.element.parentNode.removeChild(notification.element);
        }
    }
    
    // –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    hideAll() {
        this.notifications.forEach(notification => {
            this.hide(notification.id);
        });
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    showAchievement(achievement) {
        const message = `
            <div class="achievement-notification">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-info">
                    <div class="achievement-title">–ñ–∞“£–∞ –∂–µ—Ç—ñ—Å—Ç—ñ–∫!</div>
                    <div class="achievement-name">${achievement.title}</div>
                    <div class="achievement-points">+${achievement.points} “±–ø–∞–π</div>
                </div>
            </div>
        `;
        
        return this.show(message, 'success', 7000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
    showQuestComplete(quest) {
        const message = `
            <div class="quest-notification">
                <div class="quest-icon">${quest.icon}</div>
                <div class="quest-info">
                    <div class="quest-title">–¢–∞–ø—Å—ã—Ä–º–∞ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã!</div>
                    <div class="quest-name">${quest.title}</div>
                    <div class="quest-reward">+${quest.reward} “±–ø–∞–π</div>
                </div>
            </div>
        `;
        
        return this.show(message, 'success', 6000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    showLevelUp(newLevel) {
        const message = `
            <div class="level-notification">
                <div class="level-icon">üéâ</div>
                <div class="level-info">
                    <div class="level-title">–î–µ“£–≥–µ–π –∫”©—Ç–µ—Ä—ñ–ª–¥—ñ!</div>
                    <div class="level-number">–î–µ“£–≥–µ–π ${newLevel}</div>
                </div>
            </div>
        `;
        
        return this.show(message, 'success', 5000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞
    showTestResult(result) {
        const accuracy = Math.round((result.correctAnswers / result.totalQuestions) * 100);
        let type = 'info';
        let icon = 'üìä';
        
        if (accuracy >= 90) {
            type = 'success';
            icon = 'üèÜ';
        } else if (accuracy >= 70) {
            type = 'success';
            icon = 'üëç';
        } else if (accuracy >= 50) {
            type = 'warning';
            icon = 'üìà';
        } else {
            type = 'error';
            icon = 'üìâ';
        }
        
        const message = `
            <div class="test-result-notification">
                <div class="test-icon">${icon}</div>
                <div class="test-info">
                    <div class="test-title">–¢–µ—Å—Ç –∞—è“õ—Ç–∞–ª–¥—ã</div>
                    <div class="test-score">${result.correctAnswers}/${result.totalQuestions} –¥“±—Ä—ã—Å (${accuracy}%)</div>
                </div>
            </div>
        `;
        
        return this.show(message, type, 6000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    showReminder(title, message) {
        const reminderMessage = `
            <div class="reminder-notification">
                <div class="reminder-icon">üîî</div>
                <div class="reminder-info">
                    <div class="reminder-title">${title}</div>
                    <div class="reminder-message">${message}</div>
                </div>
            </div>
        `;
        
        return this.show(reminderMessage, 'info', 8000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    showConnectionStatus(isOnline) {
        const message = isOnline ? 
            '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç “õ–æ—Å—ã–ª—ã–º—ã “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—ñ–ª–¥—ñ' : 
            '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç “õ–æ—Å—ã–ª—ã–º—ã –∂–æ“õ';
        
        const type = isOnline ? 'success' : 'warning';
        
        return this.show(message, type, 3000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    showSaveStatus(success = true) {
        const message = success ? 
            '–î–µ—Ä–µ–∫—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã' : 
            '–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã';
        
        const type = success ? 'success' : 'error';
        
        return this.show(message, type, 2000);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationStyles = `
.notification {
    position: relative;
    background: var(--bg-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    margin-bottom: 0.5rem;
    overflow: hidden;
    transform: translateX(100%);
    transition: all 0.3s ease-in-out;
    max-width: 400px;
    border-left: 4px solid var(--primary-color);
}

.notification-show {
    transform: translateX(0);
}

.notification-hide {
    transform: translateX(100%);
    opacity: 0;
}

.notification-success {
    border-left-color: var(--success-color);
}

.notification-error {
    border-left-color: var(--danger-color);
}

.notification-warning {
    border-left-color: var(--warning-color);
}

.notification-content {
    display: flex;
    align-items: center;
    padding: 1rem;
    gap: 0.75rem;
}

.notification-icon {
    font-size: 1.25rem;
    flex-shrink: 0;
}

.notification-message {
    flex: 1;
    font-size: 0.875rem;
    line-height: 1.4;
    color: var(--text-primary);
}

.notification-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: var(--transition);
    flex-shrink: 0;
}

.notification-close:hover {
    background: var(--gray-100);
    color: var(--text-primary);
}

.notification-progress {
    height: 3px;
    background: var(--gray-200);
    overflow: hidden;
}

.notification-progress-bar {
    height: 100%;
    background: var(--primary-color);
    width: 100%;
    transform: translateX(-100%);
}

.notification-progress-active {
    animation: notificationProgress linear forwards;
}

@keyframes notificationProgress {
    from { transform: translateX(-100%); }
    to { transform: translateX(0); }
}

/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
.achievement-notification,
.quest-notification,
.level-notification,
.test-result-notification,
.reminder-notification {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.achievement-notification .achievement-icon,
.quest-notification .quest-icon,
.level-notification .level-icon,
.test-result-notification .test-icon,
.reminder-notification .reminder-icon {
    font-size: 2rem;
    flex-shrink: 0;
}

.achievement-notification .achievement-info,
.quest-notification .quest-info,
.level-notification .level-info,
.test-result-notification .test-info,
.reminder-notification .reminder-info {
    flex: 1;
}

.achievement-title,
.quest-title,
.level-title,
.test-title,
.reminder-title {
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.achievement-name,
.quest-name,
.level-number,
.test-score,
.reminder-message {
    font-size: 0.875rem;
    color: var(--text-secondary);
}

.achievement-points,
.quest-reward {
    font-size: 0.75rem;
    color: var(--success-color);
    font-weight: 500;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = notificationStyles;
document.head.appendChild(styleSheet);

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
window.notifications = new NotificationManager();
